plugin.Tx_Formhandler.settings.predef.themes-master-template-test-form {

	# This is the title of the predefined form shown in the dropdown box in the plugin options.
	name = MasterTemplateTest

	# Debug form
	debug = {$themes.configuration.forms.debug}

	# All form fields are prefixed with this values (e.g. master-template-test[name])
	formValuesPrefix = master-template-test

	langFile.1 = TEXT
	langFile.1.value = {$themes.configuration.forms.master.template.test.languagePath}

	templateFile = TEXT
	templateFile.value = {$themes.configuration.forms.estate.search.templatePath}MasterTemplateTest/Step1.html

	# The master template is a file containing the markup for specific field types or other sub templates (e.g. for emails). You can use these predefined markups in your HTML template for a specific form.
	masterTemplateFile = TEXT
	masterTemplateFile.value = {$themes.configuration.forms.masterTemplatePath}MasterTemplate{$themes.framework}.html

	markers {
		subject_options = CONTENT
		subject_options {
			table = fe_users
			select {
				#pid where feusers are stored
				pidInList = {$themes.configuration.forms.estate.search.subjectContainerPid}
				orderBy = name
				selectFields = email, name
				#contact form user group
				where = FIND_IN_SET({$themes.configuration.forms.estate.search.subjectFrontendUserGroupUid}, fe_users.usergroup)
				orderBy = username
				max = 10
			}
			renderObj = COA
			renderObj {
				#value
				10.wrap = <option value="subject_|"
				10 = TEXT
				10.field = uid

				#selected
				12.noTrimWrap = | ###selected_subject_|###>|
				12 = TEXT
				12.field = email

				#label
				13 = TEXT
				13.value = {field:name}</option>
				13.insertData = 1
			}
		}
	}

	# CSS files
	cssFile {
	}

	# In case an error occurred, all markers ###is_error_[fieldname]### are filled with the configured value of the setting "default".
	isErrorMarker {
		default = has-error
	}

	# These wraps define how an error messages looks like. The message itself is set in the lang file.
	singleErrorTemplate {
		totalWrap = <div class="help-block">|</div>
	}

	# This block defines the error checks performed when the user hits submit.
	validators {
		1.class = Validator_Default
		1.config.fieldConf {
			email.errorCheck.1 = email
			subject.errorCheck.1 = required
			subject.errorCheck.2 = subject
			mathguard_answer.errorCheck.1 = mathGuard
		}
	}

	# Finishers are called after the form was submitted successfully (without errors).
	finishers {

		# Finisher_Mail sends emails to an admin and/or the user.
		1.class = Finisher_MailSubjectRecipient
		1.config {
			checkBinaryCrLf = message
			admin {
				templateFile = TEXT
				templateFile.value = {$themes.configuration.forms.estate.search.templatePath}EstateSearch/email-admin.html
				sender_email = {$themes.configuration.forms.estate.search.email.admin.sender_email}
				to_email = {$themes.configuration.forms.estate.search.email.admin.to_email}
				subject = TEXT
				subject.data = LLL:{$themes.configuration.forms.estate.search.languagePath}:email_admin_subject
			}
		}

		# Finisher_Redirect will redirect the user to another page after the form was submitted successfully.
		5.class = Finisher_Redirect
		5.config {
			redirectPage = {$themes.configuration.forms.estate.search.redirectPage}
		}
	}

}

# If the user has chosen to receive a copy of the estate search, reconfigure Finisher_Mail to send an email to the user to.
[globalVar = GP:master-template-test|receivecopy = 1]
	plugin.Tx_Formhandler.settings.predef.themes-master-template-test-form {
		finishers {
			1.config {
				user {
					templateFile = TEXT
					templateFile.value = {$themes.configuration.forms.estate.search.templatePath}EstateSearch/email-user.html
					sender_email = {$themes.configuration.forms.estate.search.email.user.sender_email}
					to_email = email
					subject = TEXT
					subject.data = LLL:{$themes.configuration.forms.estate.search.languagePath}:email_user_subject
				}
			}
		}
	}
[global]
